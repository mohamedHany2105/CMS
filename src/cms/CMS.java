import java.awt.Component;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import java.util.List; // Changed from ArrayList to List for flexibility
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class CMS extends javax.swing.JFrame {

    private int selectedContactSno = 0; // To store SNO of the selected row for edit/delete
    private ContactDAO contactDAO;
    private DefaultTableModel dtm;

    public CMS() {
        contactDAO = new ContactDAO(); // Initialize DAO
        initComponents(); // This method is generated by NetBeans GUI builder
        initializeTable();
        updateTable();
    }

    private void initializeTable() {
        String[] titles = {"S.No.", "Name", "Phone", "Address", "Email"}; // "num" changed to "S.No."
        dtm = new DefaultTableModel(titles, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make table cells non-editable
                return false;
            }
        };
        jTable_Display_CMS.setModel(dtm);
    }

    private void updateTable() {
        dtm.setRowCount(0); // Clear existing rows
        List<Contact> contacts = contactDAO.getAllContacts();

        if (contacts != null) {
            for (Contact contact : contacts) {
                Object[] rowData = {
                    contact.getSno(),
                    contact.getName(),
                    contact.getPhone(),
                    contact.getAddress(),
                    contact.getEmail()
                };
                dtm.addRow(rowData);
            }
        }
        // Optional: Clear selection after update
        jTable_Display_CMS.clearSelection();
        clearInputFields(); // Clear fields after updating table
        selectedContactSno = 0; // Reset selected contact ID
    }

    private void clearInputFields() {
        txtName.setText("");
        phone.setText("");
        address.setText("");
        email.setText("");
        txtsearch.setText(""); // Also clear search field
        selectedContactSno = 0; // Reset ID when clearing fields
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        phone = new javax.swing.JTextField();
        address = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Display_CMS = new javax.swing.JTable();
        txtName = new javax.swing.JTextField();
        edit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtsearch = new javax.swing.JTextField();
        find = new javax.swing.JButton();
        Delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Contact Management System");

        jLabel1.setText("Phone Number");

        lblName.setText("Name");

        jLabel3.setText("Address");

        jLabel4.setText("Email");

        save.setBackground(new java.awt.Color(0, 0, 255));
        save.setForeground(new java.awt.Color(51, 255, 0));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        reset.setBackground(new java.awt.Color(204, 204, 255));
        reset.setForeground(new java.awt.Color(51, 51, 51));
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        jTable_Display_CMS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No.", "Name", "Phone", "Address", "Email"
            }
        ));
        jTable_Display_CMS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_Display_CMSMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Display_CMS);

        edit.setBackground(new java.awt.Color(0, 255, 204));
        edit.setForeground(new java.awt.Color(0, 0, 204));
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        jLabel2.setText("Search");

        find.setBackground(new java.awt.Color(0, 0, 0));
        find.setForeground(new java.awt.Color(255, 255, 255));
        find.setText("Find");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(0, 0, 0));
        Delete.setForeground(new java.awt.Color(255, 0, 51));
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtsearch)
                            .addComponent(txtName)
                            .addComponent(phone)
                            .addComponent(address)
                            .addComponent(email)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(find, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save)
                            .addComponent(edit)
                            .addComponent(reset)
                            .addComponent(find))
                        .addGap(18, 18, 18)
                        .addComponent(Delete))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null); // Center the window
    }// </editor-fold>//GEN-END:initComponents

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        clearInputFields();
        jTable_Display_CMS.clearSelection(); // Also clear table selection
        ((TableRowSorter<DefaultTableModel>)jTable_Display_CMS.getRowSorter()).setRowFilter(null); // Clear filter
    }//GEN-LAST:event_resetActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        String nameStr = txtName.getText().trim();
        String phoneStr = phone.getText().trim();
        String addressStr = address.getText().trim();
        String emailStr = email.getText().trim();

        if (nameStr.isEmpty() || phoneStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name and Phone cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Contact newContact = new Contact();
        newContact.setName(nameStr);
        newContact.setPhone(phoneStr); // Store phone as String
        newContact.setAddress(addressStr);
        newContact.setEmail(emailStr);

        if (contactDAO.saveContact(newContact)) {
            JOptionPane.showMessageDialog(this, "Contact saved successfully!");
            updateTable(); // This also calls clearInputFields()
        } else {
            // Error message is shown by DAO
        }
    }//GEN-LAST:event_saveActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        if (selectedContactSno <= 0) {
            JOptionPane.showMessageDialog(this, "Please select a contact from the table to edit.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String nameStr = txtName.getText().trim();
        String phoneStr = phone.getText().trim();
        String addressStr = address.getText().trim();
        String emailStr = email.getText().trim();

        if (nameStr.isEmpty() || phoneStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name and Phone cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Contact contactToUpdate = new Contact();
        contactToUpdate.setSno(selectedContactSno); // Crucial: set the ID of the contact to update
        contactToUpdate.setName(nameStr);
        contactToUpdate.setPhone(phoneStr);
        contactToUpdate.setAddress(addressStr);
        contactToUpdate.setEmail(emailStr);

        if (contactDAO.updateContact(contactToUpdate)) {
            JOptionPane.showMessageDialog(this, "Contact updated successfully!");
            updateTable(); // This also calls clearInputFields()
        } else {
            // Error message is shown by DAO or if ID was invalid
        }
    }//GEN-LAST:event_editActionPerformed

    private void jTable_Display_CMSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_Display_CMSMouseClicked
        int selectedRow = jTable_Display_CMS.getSelectedRow();
        if (selectedRow >= 0) {
            // Convert view row index to model row index in case of sorting/filtering
            int modelRow = jTable_Display_CMS.convertRowIndexToModel(selectedRow);
            
            // Get SNO directly from the model (should be an Integer)
            Object snoObject = dtm.getValueAt(modelRow, 0);
            if (snoObject instanceof Integer) {
                 selectedContactSno = (Integer) snoObject;
            } else {
                // Fallback if it's a String for some reason (though it shouldn't be)
                try {
                    selectedContactSno = Integer.parseInt(snoObject.toString());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Error reading contact ID from table.", "Table Error", JOptionPane.ERROR_MESSAGE);
                    selectedContactSno = 0; // Reset on error
                    return;
                }
            }
           
            txtName.setText(dtm.getValueAt(modelRow, 1).toString());
            phone.setText(dtm.getValueAt(modelRow, 2).toString());
            address.setText(dtm.getValueAt(modelRow, 3).toString());
            email.setText(dtm.getValueAt(modelRow, 4) != null ? dtm.getValueAt(modelRow, 4).toString() : "");
        } else {
            selectedContactSno = 0; // No row selected
        }
    }//GEN-LAST:event_jTable_Display_CMSMouseClicked

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        String searchText = txtsearch.getText().trim();
        TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>) jTable_Display_CMS.getRowSorter();
        if (sorter == null) { // Initialize sorter if not already present
             sorter = new TableRowSorter<>(dtm);
             jTable_Display_CMS.setRowSorter(sorter);
        }

        if (searchText.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            // (?i) makes the search case-insensitive
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }
    }//GEN-LAST:event_findActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        if (selectedContactSno <= 0) {
            JOptionPane.showMessageDialog(this, "Please select a contact from the table to delete.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the selected contact?", "Confirm Deletion",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (confirmation == JOptionPane.YES_OPTION) {
            if (contactDAO.deleteContact(selectedContactSno)) {
                JOptionPane.showMessageDialog(this, "Contact deleted successfully!");
                updateTable(); // Refreshes table and clears fields
            } else {
                // Error message is shown by DAO
            }
        }
    }//GEN-LAST:event_DeleteActionPerformed

    // Getters for UI components (if needed by other classes, generally not recommended for direct access)
    // For example, if you wanted to get the JTable from outside this class (which your original code had)
    public javax.swing.JTable getTableObj(){
        return jTable_Display_CMS;
    }
    
    // Getters for text fields (primarily for testing or very specific scenarios)
    public String getTxtNameContent() { return txtName.getText(); }
    public String getPhoneContent() { return phone.getText(); }
    public String getAddressContent() { return address.getText(); }
    public String getEmailContent() { return email.getText(); }
    public String getTxtSearchContent() { return txtsearch.getText(); }

    // Setters for text fields (primarily for testing or very specific scenarios)
    public void setTxtNameContent(String text) { txtName.setText(text); }
    public void setPhoneContent(String text) { phone.setText(text); }
    public void setAddressContent(String text) { address.setText(text); }
    public void setEmailContent(String text) { email.setText(text); }
    public void setTxtSearchContent(String text) { txtsearch.setText(text); }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CMS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JTextField address;
    private javax.swing.JButton edit;
    private javax.swing.JTextField email;
    private javax.swing.JButton find;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Display_CMS;
    private javax.swing.JLabel lblName;
    private javax.swing.JTextField phone;
    private javax.swing.JButton reset;
    private javax.swing.JButton save;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables
}
